package com.aserbao.aserbaosandroid.functions.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.odm.securitydetectionapp.bean.callBackInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_BACK_INFO".
*/
public class callBackInfoDao extends AbstractDao<callBackInfo, Void> {

    public static final String TABLENAME = "CALL_BACK_INFO";

    /**
     * Properties of entity callBackInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "ADDRESS");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Locate = new Property(2, boolean.class, "locate", false, "LOCATE");
        public final static Property Rescue = new Property(3, boolean.class, "rescue", false, "RESCUE");
    }


    public callBackInfoDao(DaoConfig config) {
        super(config);
    }
    
    public callBackInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_BACK_INFO\" (" + //
                "\"ADDRESS\" TEXT," + // 0: address
                "\"MESSAGE\" TEXT," + // 1: message
                "\"LOCATE\" INTEGER NOT NULL ," + // 2: locate
                "\"RESCUE\" INTEGER NOT NULL );"); // 3: rescue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_BACK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, callBackInfo entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
        stmt.bindLong(3, entity.getLocate() ? 1L: 0L);
        stmt.bindLong(4, entity.getRescue() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, callBackInfo entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
        stmt.bindLong(3, entity.getLocate() ? 1L: 0L);
        stmt.bindLong(4, entity.getRescue() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public callBackInfo readEntity(Cursor cursor, int offset) {
        callBackInfo entity = new callBackInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.getShort(offset + 2) != 0, // locate
            cursor.getShort(offset + 3) != 0 // rescue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, callBackInfo entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocate(cursor.getShort(offset + 2) != 0);
        entity.setRescue(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(callBackInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(callBackInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(callBackInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
